{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __extends, __spreadArray, __awaiter, __generator, __assign } from 'tslib';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\n\nvar FirebaseStorageError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseStorageError, _super);\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n\n\n  function FirebaseStorageError(code, message) {\n    var _this = _super.call(this, prependCode(code), \"Firebase Storage: \" + message + \" (\" + prependCode(code) + \")\") || this;\n    /**\r\n     * Stores custom error data unque to FirebaseStorageError.\r\n     */\n\n\n    _this.customData = {\n      serverResponse: null\n    };\n    _this._baseMessage = _this.message; // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(_this, FirebaseStorageError.prototype);\n    return _this;\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n\n\n  FirebaseStorageError.prototype._codeEquals = function (code) {\n    return prependCode(code) === this.code;\n  };\n\n  Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\n    get: function () {\n      return this.customData.serverResponse;\n    },\n    set: function (serverResponse) {\n      this.customData.serverResponse = serverResponse;\n\n      if (this.customData.serverResponse) {\n        this.message = this._baseMessage + \"\\n\" + this.customData.serverResponse;\n      } else {\n        this.message = this._baseMessage;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirebaseStorageError;\n}(FirebaseError);\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new FirebaseStorageError(\"unknown\"\n  /* UNKNOWN */\n  , message);\n}\n\nfunction objectNotFound(path) {\n  return new FirebaseStorageError(\"object-not-found\"\n  /* OBJECT_NOT_FOUND */\n  , \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new FirebaseStorageError(\"quota-exceeded\"\n  /* QUOTA_EXCEEDED */\n  , \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new FirebaseStorageError(\"unauthenticated\"\n  /* UNAUTHENTICATED */\n  , message);\n}\n\nfunction unauthorized(path) {\n  return new FirebaseStorageError(\"unauthorized\"\n  /* UNAUTHORIZED */\n  , \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new FirebaseStorageError(\"retry-limit-exceeded\"\n  /* RETRY_LIMIT_EXCEEDED */\n  , 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new FirebaseStorageError(\"canceled\"\n  /* CANCELED */\n  , 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new FirebaseStorageError(\"invalid-url\"\n  /* INVALID_URL */\n  , \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new FirebaseStorageError(\"invalid-default-bucket\"\n  /* INVALID_DEFAULT_BUCKET */\n  , \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new FirebaseStorageError(\"no-default-bucket\"\n  /* NO_DEFAULT_BUCKET */\n  , 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new FirebaseStorageError(\"cannot-slice-blob\"\n  /* CANNOT_SLICE_BLOB */\n  , 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new FirebaseStorageError(\"server-file-wrong-size\"\n  /* SERVER_FILE_WRONG_SIZE */\n  , 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new FirebaseStorageError(\"no-download-url\"\n  /* NO_DOWNLOAD_URL */\n  , 'The given file does not have any download URLs.');\n}\n\nfunction invalidArgument(message) {\n  return new FirebaseStorageError(\"invalid-argument\"\n  /* INVALID_ARGUMENT */\n  , message);\n}\n\nfunction appDeleted() {\n  return new FirebaseStorageError(\"app-deleted\"\n  /* APP_DELETED */\n  , 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new FirebaseStorageError(\"invalid-root-operation\"\n  /* INVALID_ROOT_OPERATION */\n  , \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new FirebaseStorageError(\"invalid-format\"\n  /* INVALID_FORMAT */\n  , \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new FirebaseStorageError(\"internal-error\"\n  /* INTERNAL_ERROR */\n  , 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\n\n\nvar StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\n\nvar StringData =\n/** @class */\nfunction () {\n  function StringData(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n  return StringData;\n}();\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  var b = [];\n\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  var decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          var invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  var array = new Uint8Array(bytes.length);\n\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nvar DataURLParts =\n/** @class */\nfunction () {\n  function DataURLParts(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    var matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    var middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n  return DataURLParts;\n}();\n\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event that is triggered on a task.\r\n */\n\n\nvar TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n};\n/**\r\n * Represents the current state of a running upload.\r\n */\n\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* RUNNING */\n    :\n    case \"pausing\"\n    /* PAUSING */\n    :\n    case \"canceling\"\n    /* CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\r\n * doesn't work in React Native on Android.\r\n */\n\n\nvar NetworkXhrIo =\n/** @class */\nfunction () {\n  function NetworkXhrIo() {\n    var _this = this;\n\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this.xhr_.addEventListener('abort', function () {\n        _this.errorCode_ = ErrorCode.ABORT;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('error', function () {\n        _this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('load', function () {\n        resolve(_this);\n      });\n    });\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.send = function (url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n\n    return this.xhr_.responseText;\n  };\n  /**\r\n   * Aborts the request.\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n\n  return NetworkXhrIo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\n\n\nvar XhrIoPool =\n/** @class */\nfunction () {\n  function XhrIoPool() {}\n\n  XhrIoPool.prototype.createXhrIo = function () {\n    return new NetworkXhrIo();\n  };\n\n  return XhrIoPool;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\n\n\nvar Location =\n/** @class */\nfunction () {\n  function Location(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  Object.defineProperty(Location.prototype, \"path\", {\n    get: function () {\n      return this.path_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Location.prototype, \"isRoot\", {\n    get: function () {\n      return this.path.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Location.prototype.fullServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  };\n\n  Location.prototype.bucketOnlyServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  };\n\n  Location.makeFromBucketSpec = function (bucketString, host) {\n    var bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  };\n\n  Location.makeFromUrl = function (url, host) {\n    var location = null;\n    var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    var gsPath = '(/(.*))?$';\n    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    var gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    var version = 'v[A-Za-z0-9_]+';\n    var firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    var firebaseStoragePath = '(/([^?#]*).*)?$';\n    var firebaseStorageRegExp = new RegExp(\"^https?://\" + firebaseStorageHost + \"/\" + version + \"/b/\" + bucketDomain + \"/o\" + firebaseStoragePath, 'i');\n    var firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    var cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    var cloudStoragePath = '([^?#]*)';\n    var cloudStorageRegExp = new RegExp(\"^https?://\" + cloudStorageHost + \"/\" + bucketDomain + \"/\" + cloudStoragePath, 'i');\n    var cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    var groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n      var captures = group.regex.exec(url);\n\n      if (captures) {\n        var bucketValue = captures[group.indices.bucket];\n        var pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  };\n\n  return Location;\n}();\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nvar FailRequest =\n/** @class */\nfunction () {\n  function FailRequest(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  FailRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n\n\n  FailRequest.prototype.cancel = function (_appDelete) {};\n\n  return FailRequest;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\n\n\nfunction start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var timeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  var triggeredCallback = false;\n\n  function triggerCallback() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (success) {\n      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));\n      return;\n    }\n\n    var mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    var waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  var stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(\"Invalid value for '\" + argument + \"'. Expected \" + minValue + \" or greater.\");\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(\"Invalid value for '\" + argument + \"'. Expected \" + maxValue + \" or less.\");\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart, host) {\n  var protocolMatch = host.match(/^(\\w+):\\/\\/.+/);\n  var protocol = protocolMatch === null || protocolMatch === void 0 ? void 0 : protocolMatch[1];\n  var origin = host;\n\n  if (protocol == null) {\n    origin = \"https://\" + host;\n  }\n\n  return origin + \"/v0\" + urlPart;\n}\n\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar NetworkRequest =\n/** @class */\nfunction () {\n  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n    var _this = this;\n\n    this.pendingXhr_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this.resolve_ = resolve;\n      _this.reject_ = reject;\n\n      _this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  NetworkRequest.prototype.start_ = function () {\n    var self = this;\n\n    function doTheRequest(backoffCallback, canceled) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      var xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent) {\n        var loaded = progressEvent.loaded;\n        var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      } // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {\n        if (self.progressCallback_ !== null) {\n          xhr.removeUploadProgressListener(progressListener);\n        }\n\n        self.pendingXhr_ = null;\n        xhr = xhr;\n        var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n        var status = xhr.getStatus();\n\n        if (!hitServer || self.isRetryStatusCode_(status)) {\n          var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        var successCode = self.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, xhr));\n      });\n    }\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n\n\n    function backoffDone(requestWentThrough, status) {\n      var resolve = self.resolve_;\n      var reject = self.reject_;\n      var xhr = status.xhr;\n\n      if (status.wasSuccessCode) {\n        try {\n          var result = self.callback_(xhr, xhr.getResponseText());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          var err = unknown();\n          err.serverResponse = xhr.getResponseText();\n\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            var err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            var err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  NetworkRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n\n\n  NetworkRequest.prototype.cancel = function (appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  };\n\n  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    var isFiveHundredCode = status >= 500 && status < 600;\n    var extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n    408, // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  };\n\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nvar RequestEndStatus =\n/** @class */\nfunction () {\n  function RequestEndStatus(wasSuccessCode, xhr, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.xhr = xhr;\n    this.canceled = !!canceled;\n  }\n\n  return RequestEndStatus;\n}();\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, pool, firebaseVersion) {\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var BlobBuilder = getBlobBuilder();\n\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\"unsupported-environment\"\n      /* UNSUPPORTED_ENVIRONMENT */\n      , \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\n\n\nvar FbsBlob =\n/** @class */\nfunction () {\n  function FbsBlob(data, elideCopy) {\n    var size = 0;\n    var blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  FbsBlob.prototype.size = function () {\n    return this.size_;\n  };\n\n  FbsBlob.prototype.type = function () {\n    return this.type_;\n  };\n\n  FbsBlob.prototype.slice = function (startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      var realBlob = this.data_;\n      var sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  };\n\n  FbsBlob.getBlob = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (isNativeBlobDefined()) {\n      var blobby = args.map(function (val) {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      var uint8Arrays = args.map(function (val) {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      var finalLength_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        finalLength_1 += array.byteLength;\n      });\n      var merged_1 = new Uint8Array(finalLength_1);\n      var index_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        for (var i = 0; i < array.length; i++) {\n          merged_1[index_1++] = array[i];\n        }\n      });\n      return new FbsBlob(merged_1, true);\n    }\n  };\n\n  FbsBlob.prototype.uploadData = function () {\n    return this.data_;\n  };\n\n  return FbsBlob;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  var obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  var index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  var newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nvar Mapping =\n/** @class */\nfunction () {\n  function Mapping(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n  return Mapping;\n}();\n\nvar mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  var tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart, host);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {\n      var path = _a[_i];\n      var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n      var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {\n      var item = _c[_b];\n\n      var reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\nvar RequestInfo =\n/** @class */\nfunction () {\n  function RequestInfo(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n  return RequestInfo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    var str = '';\n\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nvar ResumableUploadStatus =\n/** @class */\nfunction () {\n  function ResumableUploadStatus(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n  return ResumableUploadStatus;\n}();\n\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nvar RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  var body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Observer =\n/** @class */\nfunction () {\n  function Observer(nextOrObserver, error, complete) {\n    var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      var observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n  return Observer;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return function () {\n    var argsToForward = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      argsToForward[_i] = arguments[_i];\n    } // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\n\n\nvar UploadTask =\n/** @class */\nfunction () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob, metadata) {\n    var _this = this;\n\n    if (metadata === void 0) {\n      metadata = null;\n    }\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n\n\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* RUNNING */\n    ;\n\n    this._errorHandler = function (error) {\n      _this._request = undefined;\n      _this._chunkMultiplier = 1;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        _this._needToFetchStatus = true;\n\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n\n        _this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this._request = undefined;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n\n        _this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n\n      _this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, function () {});\n  }\n\n  UploadTask.prototype._makeProgressCallback = function () {\n    var _this = this;\n\n    var sizeBefore = this._transferred;\n    return function (loaded) {\n      return _this._updateProgress(sizeBefore + loaded);\n    };\n  };\n\n  UploadTask.prototype._shouldDoResumable = function (blob) {\n    return blob.size() > 256 * 1024;\n  };\n\n  UploadTask.prototype._start = function () {\n    if (this._state !== \"running\"\n    /* RUNNING */\n    ) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  };\n\n  UploadTask.prototype._resolveToken = function (callback) {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n    this._ref.storage._getAuthToken().then(function (authToken) {\n      switch (_this._state) {\n        case \"running\"\n        /* RUNNING */\n        :\n          callback(authToken);\n          break;\n\n        case \"canceling\"\n        /* CANCELING */\n        :\n          _this._transition(\"canceled\"\n          /* CANCELED */\n          );\n\n          break;\n\n        case \"pausing\"\n        /* PAUSING */\n        :\n          _this._transition(\"paused\"\n          /* PAUSED */\n          );\n\n          break;\n      }\n    });\n  }; // TODO(andysoto): assert false\n\n\n  UploadTask.prototype._createResumable = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n\n      var createRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n\n      _this._request = createRequest;\n      createRequest.getPromise().then(function (url) {\n        _this._request = undefined;\n        _this._uploadUrl = url;\n        _this._needToFetchStatus = false;\n\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._fetchStatus = function () {\n    var _this = this; // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n\n    var url = this._uploadUrl;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);\n\n      var statusRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n\n      _this._request = statusRequest;\n      statusRequest.getPromise().then(function (status) {\n        status = status;\n        _this._request = undefined;\n\n        _this._updateProgress(status.current);\n\n        _this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          _this._needToFetchMetadata = true;\n        }\n\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._continueUpload = function () {\n    var _this = this;\n\n    var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    var status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    var url = this._uploadUrl;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());\n      } catch (e) {\n        _this._error = e;\n\n        _this._transition(\"error\"\n        /* ERROR */\n        );\n\n        return;\n      }\n\n      var uploadRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n\n      _this._request = uploadRequest;\n      uploadRequest.getPromise().then(function (newStatus) {\n        _this._increaseMultiplier();\n\n        _this._request = undefined;\n\n        _this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          _this._metadata = newStatus.metadata;\n\n          _this._transition(\"success\"\n          /* SUCCESS */\n          );\n        } else {\n          _this.completeTransitions_();\n        }\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._increaseMultiplier = function () {\n    var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  };\n\n  UploadTask.prototype._fetchMetadata = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = getMetadata(_this._ref.storage, _this._ref._location, _this._mappings);\n\n      var metadataRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n\n      _this._request = metadataRequest;\n      metadataRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n\n        _this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, _this._metadataErrorHandler);\n    });\n  };\n\n  UploadTask.prototype._oneShotUpload = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n\n      var multipartRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n\n      _this._request = multipartRequest;\n      multipartRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n\n        _this._updateProgress(_this._blob.size());\n\n        _this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._updateProgress = function (transferred) {\n    var old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  };\n\n  UploadTask.prototype._transition = function (state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case \"canceling\"\n      /* CANCELING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case \"pausing\"\n      /* PAUSING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        var wasPaused = this._state === \"paused\"\n        /* PAUSED */\n        ;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case \"paused\"\n      /* PAUSED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"canceled\"\n      /* CANCELED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"error\"\n      /* ERROR */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"success\"\n      /* SUCCESS */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  };\n\n  UploadTask.prototype.completeTransitions_ = function () {\n    switch (this._state) {\n      case \"pausing\"\n      /* PAUSING */\n      :\n        this._transition(\"paused\"\n        /* PAUSED */\n        );\n\n        break;\n\n      case \"canceling\"\n      /* CANCELING */\n      :\n        this._transition(\"canceled\"\n        /* CANCELED */\n        );\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        this._start();\n\n        break;\n    }\n  };\n\n  Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n    /**\r\n     * A snapshot of the current task state.\r\n     */\n    get: function () {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return {\n        bytesTransferred: this._transferred,\n        totalBytes: this._blob.size(),\n        state: externalState,\n        metadata: this._metadata,\n        task: this,\n        ref: this._ref\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `FirebaseStorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n\n  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n\n    var observer = new Observer(nextOrObserver, error, completed);\n\n    this._addObserver(observer);\n\n    return function () {\n      _this._removeObserver(observer);\n    };\n  };\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n\n\n  UploadTask.prototype.then = function (onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  };\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n\n\n  UploadTask.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n  /**\r\n   * Adds the given observer.\r\n   */\n\n\n  UploadTask.prototype._addObserver = function (observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  };\n  /**\r\n   * Removes the given observer.\r\n   */\n\n\n  UploadTask.prototype._removeObserver = function (observer) {\n    var i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  };\n\n  UploadTask.prototype._notifyObservers = function () {\n    var _this = this;\n\n    this._finishPromise();\n\n    var observers = this._observers.slice();\n\n    observers.forEach(function (observer) {\n      _this._notifyObserver(observer);\n    });\n  };\n\n  UploadTask.prototype._finishPromise = function () {\n    if (this._resolve !== undefined) {\n      var triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          var toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  };\n\n  UploadTask.prototype._notifyObserver = function (observer) {\n    var externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  };\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.resume = function () {\n    var valid = this._state === \"paused\"\n    /* PAUSED */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"running\"\n      /* RUNNING */\n      );\n    }\n\n    return valid;\n  };\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.pause = function () {\n    var valid = this._state === \"running\"\n    /* RUNNING */\n    ;\n\n    if (valid) {\n      this._transition(\"pausing\"\n      /* PAUSING */\n      );\n    }\n\n    return valid;\n  };\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.cancel = function () {\n    var valid = this._state === \"running\"\n    /* RUNNING */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"canceling\"\n      /* CANCELING */\n      );\n    }\n\n    return valid;\n  };\n\n  return UploadTask;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nvar Reference =\n/** @class */\nfunction () {\n  function Reference(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  Reference.prototype.toString = function () {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  };\n\n  Reference.prototype._newRef = function (service, location) {\n    return new Reference(service, location);\n  };\n\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\n    get: function () {\n      var location = new Location(this._location.bucket, '');\n      return this._newRef(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\n    get: function () {\n      return this._location.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    /**\r\n     * The full path of this object.\r\n     */\n    get: function () {\n      return this._location.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\n    get: function () {\n      return lastComponent(this._location.path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\n    get: function () {\n      return this._service;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\n    get: function () {\n      var newPath = parent(this._location.path);\n\n      if (newPath === null) {\n        return null;\n      }\n\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n\n  Reference.prototype._throwIfRoot = function (name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n\n  return Reference;\n}();\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nfunction listAllHelper(ref, accumulator, pageToken) {\n  return __awaiter(this, void 0, void 0, function () {\n    var opt, nextPage;\n\n    var _a, _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          opt = {\n            // maxResults is 1000 by default.\n            pageToken: pageToken\n          };\n          return [4\n          /*yield*/\n          , list$1(ref, opt)];\n\n        case 1:\n          nextPage = _c.sent();\n\n          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);\n\n          (_b = accumulator.items).push.apply(_b, nextPage.items);\n\n          if (!(nextPage.nextPageToken != null)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , listAllHelper(ref, accumulator, nextPage.nextPageToken)];\n\n        case 2:\n          _c.sent();\n\n          _c.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list$1(ref, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, op, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (options != null) {\n            if (typeof options.maxResults === 'number') {\n              validateNumber('options.maxResults',\n              /* minValue= */\n              1,\n              /* maxValue= */\n              1000, options.maxResults);\n            }\n          }\n\n          return [4\n          /*yield*/\n          , ref.storage._getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          op = options || {};\n          requestInfo = list(ref.storage, ref._location,\n          /*delimiter= */\n          '/', op.pageToken, op.maxResults);\n          return [2\n          /*return*/\n          , ref.storage._makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * A promise that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getMetadata');\n\n          return [4\n          /*yield*/\n          , ref.storage._getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getMetadata(ref.storage, ref._location, getMappings());\n          return [2\n          /*return*/\n          , ref.storage._makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A promise that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('updateMetadata');\n\n          return [4\n          /*yield*/\n          , ref.storage._getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = updateMetadata(ref.storage, ref._location, metadata, getMappings());\n          return [2\n          /*return*/\n          , ref.storage._makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A promise that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getDownloadURL');\n\n          return [4\n          /*yield*/\n          , ref.storage._getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n          return [2\n          /*return*/\n          , ref.storage._makeRequest(requestInfo, authToken).getPromise().then(function (url) {\n            if (url === null) {\n              throw noDownloadURL();\n            }\n\n            return url;\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A promise that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('deleteObject');\n\n          return [4\n          /*yield*/\n          , ref.storage._getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = deleteObject(ref.storage, ref._location);\n          return [2\n          /*return*/\n          , ref.storage._makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\n\n\nfunction _getChild(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof StorageService) {\n    var service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    var reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction useStorageEmulator(storage, host, port) {\n  storage.host = \"http://\" + host + \":\" + port;\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @public\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageService =\n/** @class */\nfunction () {\n  function StorageService(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider, _pool, _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._pool = _pool;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     * - protocol://host:port\r\n     */\n\n    this._host = DEFAULT_HOST;\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  Object.defineProperty(StorageService.prototype, \"host\", {\n    get: function () {\n      return this._host;\n    },\n\n    /**\r\n     * Set host string for this service.\r\n     * @param host - host string in the form of host, host:port,\r\n     * or protocol://host:port\r\n     */\n    set: function (host) {\n      this._host = host;\n\n      if (this._url != null) {\n        this._bucket = Location.makeFromBucketSpec(this._url, host);\n      } else {\n        this._bucket = extractBucket(host, this.app.options);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageService.prototype, \"maxUploadRetryTime\", {\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\n    get: function () {\n      return this._maxUploadRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageService.prototype, \"maxOperationRetryTime\", {\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\n    get: function () {\n      return this._maxOperationRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StorageService.prototype._getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var auth, tokenData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            auth = this._authProvider.getImmediate({\n              optional: true\n            });\n            if (!auth) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , auth.getToken()];\n\n          case 1:\n            tokenData = _a.sent();\n\n            if (tokenData !== null) {\n              return [2\n              /*return*/\n              , tokenData.accessToken];\n            }\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n\n\n  StorageService.prototype._delete = function () {\n    this._deleted = true;\n\n    this._requests.forEach(function (request) {\n      return request.cancel();\n    });\n\n    this._requests.clear();\n\n    return Promise.resolve();\n  };\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n\n\n  StorageService.prototype._makeStorageReference = function (loc) {\n    return new Reference(this, loc);\n  };\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n\n\n  StorageService.prototype._makeRequest = function (requestInfo, authToken) {\n    var _this = this;\n\n    if (!this._deleted) {\n      var request_1 = makeRequest(requestInfo, this._appId, authToken, this._pool, this._firebaseVersion);\n\n      this._requests.add(request_1); // Request removes itself from set when complete.\n\n\n      request_1.getPromise().then(function () {\n        return _this._requests.delete(request_1);\n      }, function () {\n        return _this._requests.delete(request_1);\n      });\n      return request_1;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  };\n\n  return StorageService;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable(ref, data, metadata);\n}\n/**\r\n * A promise that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction getMetadata$2(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A promise that resolves with the new metadata for this object.\r\n */\n\n\nfunction updateMetadata$2(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list$2(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll$1(ref) {\n  ref = getModularInstance(ref);\n  return listAll(ref);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A promise that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL$1(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A promise that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$2(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChild$1(ref, childPath) {\n  return _getChild(ref, childPath);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskSnapshotCompat =\n/** @class */\nfunction () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"bytesTransferred\", {\n    get: function () {\n      return this._delegate.bytesTransferred;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"metadata\", {\n    get: function () {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"state\", {\n    get: function () {\n      return this._delegate.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"totalBytes\", {\n    get: function () {\n      return this._delegate.totalBytes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return UploadTaskSnapshotCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskCompat =\n/** @class */\nfunction () {\n  function UploadTaskCompat(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n\n  Object.defineProperty(UploadTaskCompat.prototype, \"snapshot\", {\n    get: function () {\n      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n\n    return this._delegate.then(function (snapshot) {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n      }\n    }, onRejected);\n  };\n\n  UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n\n    var wrappedNextOrObserver = undefined;\n\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = function (taskSnapshot) {\n          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n        };\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? function (taskSnapshot) {\n            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n          } : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  };\n\n  return UploadTaskCompat;\n}();\n\nvar ListResultCompat =\n/** @class */\nfunction () {\n  function ListResultCompat(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  Object.defineProperty(ListResultCompat.prototype, \"prefixes\", {\n    get: function () {\n      var _this = this;\n\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"items\", {\n    get: function () {\n      var _this = this;\n\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"nextPageToken\", {\n    get: function () {\n      return this._delegate.nextPageToken || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ListResultCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ReferenceCompat =\n/** @class */\nfunction () {\n  function ReferenceCompat(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  Object.defineProperty(ReferenceCompat.prototype, \"name\", {\n    get: function () {\n      return this._delegate.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"bucket\", {\n    get: function () {\n      return this._delegate.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"fullPath\", {\n    get: function () {\n      return this._delegate.fullPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ReferenceCompat.prototype.toString = function () {\n    return this._delegate.toString();\n  };\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n\n\n  ReferenceCompat.prototype.child = function (childPath) {\n    var reference = _getChild$1(this._delegate, childPath);\n\n    return new ReferenceCompat(reference, this.storage);\n  };\n\n  Object.defineProperty(ReferenceCompat.prototype, \"root\", {\n    get: function () {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"parent\", {\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n    get: function () {\n      var reference = this._delegate.parent;\n\n      if (reference == null) {\n        return null;\n      }\n\n      return new ReferenceCompat(reference, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n  ReferenceCompat.prototype.put = function (data, metadata) {\n    this._throwIfRoot('put');\n\n    return new UploadTaskCompat(uploadBytesResumable$1(this._delegate, data, metadata), this);\n  };\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  ReferenceCompat.prototype.putString = function (value, format, metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n\n    this._throwIfRoot('putString');\n\n    var data = dataFromString(format, value);\n\n    var metadataClone = __assign({}, metadata);\n\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n\n    return new UploadTaskCompat(new UploadTask(this._delegate, new FbsBlob(data.data, true), metadataClone), this);\n  };\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n\n\n  ReferenceCompat.prototype.listAll = function () {\n    var _this = this;\n\n    return listAll$1(this._delegate).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n\n\n  ReferenceCompat.prototype.list = function (options) {\n    var _this = this;\n\n    return list$2(this._delegate, options || undefined).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * A promise that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n\n\n  ReferenceCompat.prototype.getMetadata = function () {\n    return getMetadata$2(this._delegate);\n  };\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A promise that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n\n\n  ReferenceCompat.prototype.updateMetadata = function (metadata) {\n    return updateMetadata$2(this._delegate, metadata);\n  };\n  /**\r\n   * @returns A promise that resolves with the download\r\n   * URL for this object.\r\n   */\n\n\n  ReferenceCompat.prototype.getDownloadURL = function () {\n    return getDownloadURL$1(this._delegate);\n  };\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A promise that resolves if the deletion succeeds.\r\n   */\n\n\n  ReferenceCompat.prototype.delete = function () {\n    this._throwIfRoot('delete');\n\n    return deleteObject$2(this._delegate);\n  };\n\n  ReferenceCompat.prototype._throwIfRoot = function (name) {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n\n  return ReferenceCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageServiceCompat =\n/** @class */\nfunction () {\n  function StorageServiceCompat(app, _delegate) {\n    var _this = this;\n\n    this.app = app;\n    this._delegate = _delegate;\n    this.INTERNAL = {\n      /**\r\n       * Called when the associated app is deleted.\r\n       */\n      delete: function () {\n        return _this._delegate._delete();\n      }\n    };\n  }\n\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxOperationRetryTime\", {\n    get: function () {\n      return this._delegate.maxOperationRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxUploadRetryTime\", {\n    get: function () {\n      return this._delegate.maxUploadRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n\n  StorageServiceCompat.prototype.ref = function (path) {\n    if (isUrl(path)) {\n      throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n\n    return new ReferenceCompat(ref$1(this._delegate, path), this);\n  };\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n\n\n  StorageServiceCompat.prototype.refFromURL = function (url) {\n    if (!isUrl(url)) {\n      throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n\n    try {\n      Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n\n    return new ReferenceCompat(ref$1(this._delegate, url), this);\n  };\n\n  StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {\n    this._delegate.maxUploadRetryTime = time;\n  };\n\n  StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {\n    this._delegate.maxOperationRetryTime = time;\n  };\n\n  StorageServiceCompat.prototype.useEmulator = function (host, port) {\n    useStorageEmulator(this._delegate, host, port);\n  };\n\n  return StorageServiceCompat;\n}();\n\nvar name = \"@firebase/storage\";\nvar version = \"0.5.1\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nvar STORAGE_TYPE = 'storage';\n\nfunction factory(container, _a) {\n  var url = _a.instanceIdentifier; // Dependencies\n  // TODO: This should eventually be 'app-compat'\n\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal'); // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n\n  var storageServiceCompat = new StorageServiceCompat(app, new StorageService(app, authProvider, new XhrIoPool(), url, firebase.SDK_VERSION));\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","__extends","code","message","_super","prependCode","_this","serverResponse","_baseMessage","Object","setPrototypeOf","FirebaseStorageError","prototype","customData","FirebaseError","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","data","contentType","dataFromString","stringData","StringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","value","b","i","length","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","decodeURIComponent","e","hasMinus","indexOf","hasUnder","invalidChar","hasPlus","hasSlash","replace","bytes","atob","array","dataURL","matches","match","middle","base64","endsWith","substring","rest","dataUrl","parts","DataURLParts","s","end","longEnough","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","ErrorCode","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","addEventListener","ABORT","resolve","NETWORK_ERROR","NetworkXhrIo","method","body","headers","sent_","open","undefined","key","hasOwnProperty","setRequestHeader","toString","send","status","responseText","abort","header","getResponseHeader","listener","upload","removeEventListener","XhrIoPool","path_","Location","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","error","promise_","reject","FailRequest","_appDelete","start","f","callback","timeout","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","success","call","__spreadArray","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","clearTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocolMatch","protocol","origin","makeQueryString","params","queryPart","nextPart","successCodes","additionalRetryCodes","errorCallback","progressCallback","pool","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","NetworkRequest","self","doTheRequest","backoffCallback","RequestEndStatus","xhr","createXhrIo","pendingXhr_","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","then","removeUploadProgressListener","hitServer","getErrorCode","getStatus","isRetryStatusCode_","wasCanceled","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponseText","err","appDelete_","canceled_","backoffId_","appDelete","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","makeRequest","requestInfo","urlParams","assign","errorHandler","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","bb","append","sliceBlob","blob","webkitSlice","mozSlice","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","FbsBlob","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength_1","forEach","merged_1","index_1","jsonObjectOrNull","obj","JSON","parse","parent","index","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","join","lastComponent","noXform_","metadata","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","Mapping","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","_i","pathWithoutTrailingSlash","reference","_b","item","fromResponseString","handlerCheck","cndn","metadataHandler","text","listHandler","downloadUrlHandler","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","RequestInfo","list","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","getDownloadUrl","updateMetadata","deleteObject","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","current","finalized","checkResumeHeader_","allowed","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","ResumableUploadStatus","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","ref","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","_codeEquals","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","_resolve","_reject","_start","UploadTask","sizeBefore","_transferred","_updateProgress","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","storage","_getAuthToken","_resolveToken","_location","createRequest","_makeRequest","getPromise","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","Observer","_addObserver","_removeObserver","onFulfilled","onRejected","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","snapshot","toCall","_service","Reference","_newRef","uploadBytesResumable","_throwIfRoot","listAll","accumulator","listAllHelper","opt","nextPage","_c","_a","options","op","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","requestsDeleteObject","_getChild","isUrl","test","refFromURL","refFromPath","StorageService","_bucket","includes","serviceOrRef","pathOrUrl","extractBucket","config","makeFromBucketSpec","useStorageEmulator","port","app","_authProvider","_pool","_url","_firebaseVersion","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","_host","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","_deleted","clear","request_1","_appId","add","delete","getModularInstance","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","_delegate","UploadTaskSnapshotCompat","catch","pause","resume","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","on","ListResultCompat","ReferenceCompat","root","__assign","_UploadTask","_FbsBlob","r","_delete","StorageServiceCompat","_Location","internalUseEmulator","STORAGE_TYPE","factory","container","getProvider","authProvider","storageServiceCompat","firebase","SDK_VERSION","registerStorage","instance","namespaceExports","Storage","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion"],"sources":["C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\constants.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\error.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\string.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\taskenums.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\xhrio.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\xhrio_network.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\xhriopool.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\location.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\failrequest.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\backoff.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\type.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\url.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\request.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\fs.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\blob.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\json.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\path.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\metadata.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\list.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\requestinfo.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\requests.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\observer.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\async.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\task.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\reference.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\src\\service.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\exp\\api.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\compat\\tasksnapshot.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\compat\\task.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\compat\\list.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\compat\\reference.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\compat\\service.ts","C:\\xampp\\htdocs\\JWT - Auth\\frontend\\node_modules\\@firebase\\storage\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class FirebaseStorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to FirebaseStorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `FirebaseStorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = string;\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n */\nexport type TaskState = string;\n\n/**\n * Represents the current state of a running upload.\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string, host: string): string {\n  const protocolMatch = host.match(/^(\\w+):\\/\\/.+/);\n  const protocol = protocolMatch?.[1];\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { FirebaseStorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `FirebaseStorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `FirebaseStorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  FirebaseStorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage._getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `FirebaseStorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions } from '../exp/public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { UploadResult } from './tasksnapshot';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  return ref.storage\n    ._getAuthToken()\n    .then(authToken => {\n      const requestInfo = multipartUpload(\n        ref.storage,\n        ref._location,\n        getMappings(),\n        new FbsBlob(data, true),\n        metadata\n      );\n      const multipartRequest = ref.storage._makeRequest(requestInfo, authToken);\n      return multipartRequest.getPromise();\n    })\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage._getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    ._makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function useStorageEmulator(\n  storage: StorageService,\n  host: string,\n  port: number\n): void {\n  storage.host = `http://${host}:${port}`;\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @public\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   * - protocol://host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    readonly _pool: XhrIoPool,\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  get host(): string {\n    return this._host;\n  }\n\n  /**\n   * Set host string for this service.\n   * @param host - host string in the form of host, host:port,\n   * or protocol://host:port\n   */\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _getProvider,\n  FirebaseApp,\n  getApp\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\n\nimport {\n  ref as refInternal,\n  StorageService as StorageServiceInternal\n} from '../src/service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  StorageService,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from '../src/metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from '../src/reference';\nimport { STORAGE_TYPE } from './constants';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from '../src/implementation/location';\nexport { UploadTask as _UploadTask } from '../src/task';\nexport type { Reference as _Reference } from '../src/reference';\nexport { FbsBlob as _FbsBlob } from '../src/implementation/blob';\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: string,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a StorageReference for the given url.\n * @param storage - `StorageService` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): StorageReference;\n/**\n * Returns a StorageReference for the given path in the\n * default bucket.\n * @param storageOrRef - `StorageService` or `StorageReference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: StorageService | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as StorageServiceInternal | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\nexport { StringFormat } from '../src/implementation/string';\n\n/**\n * Gets a Firebase StorageService instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get Storage instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A Firebase StorageService instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): StorageService {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage-exp'> = _getProvider(\n    app,\n    STORAGE_TYPE\n  );\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '../exp/api';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot> {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  FirebaseStorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '../exp/api';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: FirebaseStorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '../exp/api';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob\n} from '../exp/api'; // import from the exp public API\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { dataFromString } from '../src/implementation/string';\nimport { invalidRootOperation } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference> {\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as Metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata } as Metadata;\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as Metadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport { ref, _Location } from '../exp/api'; // import from the exp public API\nimport { ReferenceCompat } from './reference';\nimport {\n  isUrl,\n  StorageService,\n  useStorageEmulator as internalUseEmulator\n} from '../src/service';\nimport { invalidArgument } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<StorageService> {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(host: string, port: number): void {\n    internalUseEmulator(this._delegate, host, port);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent, TaskState } from './src/implementation/taskenums';\n\nimport { XhrIoPool } from './src/implementation/xhriopool';\nimport { ReferenceCompat } from './compat/reference';\nimport { StorageServiceCompat } from './compat/service';\nimport { StorageService } from './src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(\n      app,\n      authProvider,\n      new XhrIoPool(),\n      url,\n      firebase.SDK_VERSION\n    )\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n"]},"metadata":{},"sourceType":"module"}